---
- name: 'BEGIN: {{ reference_artifact_path }} - Check if artifact vars_file exists'
  stat:
    path: '{{ reference_artifact_vars_file_path }}'
  register: vars_file

- name: Set template_content to null before loading artifact
  set_fact:
    template_content: null
    loaded_artifact: null

- name: Include reference_artifact vars file from file
  include_vars:
    file: '{{ reference_artifact_vars_file_path }}'
    name: vars_loaded_artifact
  when: vars_file.stat.exists

- set_fact:
    loaded_artifact: '{{ vars_loaded_artifact }}'
  when: vars_file.stat.exists

- name: Include role reference_artifact_path
  include_role:
    name: '{{ reference_artifact_path }}'
  vars:
    profile: '{{ user_artifact.metadata.profile }}'
  when: not vars_file.stat.exists

- debug:
    var: '{{ debug_item }}'
    verbosity: 0
  with_items: [reference_artifact, user_artifact, artifact, artifact_definition]
  loop_control:
    loop_var: debug_item

- name: "Render the artifact template for {{ template_data.artifact.full_name }}"
  blockinfile:
    create: yes
    dest: "{{ spec.terraplate.component_dir }}/{{ spec.terraplate.monolithic_file_name }}.tf"
    marker: '# {mark} {{ template_data.artifact.full_name }}'
    block: "{{ lookup('template', 'main.tf.j2') }}"

- name: "Render the tfvars file for {{ template_data.artifact.full_name }}"
  template:
    src: vars.tfvars.j2
    dest: '{{ spec.terraplate.component_vars_dir }}/vars.tfvars'
  when: user_artifact.variables | length > 0
