---
env_spec:
  resources:
    instances:
      - _id: rails_server_1
        # TODO: implement filter for getting most recent AMI IDs for a specific distro
        amis: '{{ global_vars.amis.debian_stretch }}'
        ami: ${lookup(var.aws_instance_rails_server_1_amis, "ap-southeast-1")}
        # region: ap-southeast-1
        subnet_id: ${data.terraform_remote_state.network.aws_subnet_dink_public_1_id}
        vpc_security_group_ids: # ['${data.terraform_remote_state.security.aws_security_group_app-server_security_group_id}']
          - ${data.terraform_remote_state.security.aws_security_group_app_server_id}
        availability_zone: ap-southeast-1a
        # Note: Tags can be associated to ansible roles for configuration after provisioning
        tags:
          Name: This great Instance
          Environment: '{{ env.terraplate.tld }}'
          Role-rails-server: 'yes'
        key_name: '{{ config.resources.admin.compute.key_pairs[0].key_name }}'
        root_block_device:
          volume_size: '12'
        xeip:
          instance: rails_server_1
        # - _id: rails_server_1_eip
        # - instance: ${aws_instance.rails_server_1.id}
        records:
          - name: 'server1-{{ env.terraplate.tld }}.{{ config.resources.admin.dns.zones[0].name }}'
            zone_id: "${data.terraform_remote_state.dns.domain.aws_route53_zone_{{ config.resources.admin.dns.zones[0].name | replace('.', '-') }}_zone_id}"
            type: 'A'
            records: ['${aws_eip.rails_server_1_eip.public_ip}']
        elb: blah
    elbs:
      - _id: blah
        records:
          - name: 'server1-{{ env.terraplate.tld }}.{{ config.resources.admin.dns.zones[0].name }}'
            zone_id: "${data.terraform_remote_state.dns.domain.aws_route53_zone_{{ config.resources.admin.dns.zones[0].name | replace('.', '-') }}_zone_id}"
            type: 'A'
            records: ['${aws_eip.rails_server_1_eip.public_ip}']
