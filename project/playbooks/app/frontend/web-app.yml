#!/usr/bin/env ansible-playbook
---
- name: Template a Web Application on an S3 bucket
  hosts: app-frontend-webapp
  tasks:
    - include_role:
        name: terraplate/utils
        tasks_from: get-current-ip
      when: false
    # NOTE: if app-frontend-webapp is part of the group 'app' in the inventory
    # those hosts (app-backend-network, etc) can share the same application-vars.yml
    # so that file can move to inventory
    # maybe vars are keyed under: globals, group, host
    # each with a terraplate, terragrutn adn terrafomr key which can then be merged
    # into a single hash under manifest
    - include_vars:
        file: ../application-vars.yml
        name: application
    - include_role:
        name: terraplate/component
      vars:
        manifest:
          kind: aws/s3/web-app
          application: '{{ application }}'
          component:
            terraplate:
              name: frontend/web-app
            terragrunt:
              dependencies: []
            terraform:
              providers: [aws]
              remote_states: [dns]
          xproviders:
            - metadata:
                type: template
              data_sources:
                - metadata:
                    type: template_file
                    name: s3_bucket
            - metadata:
                type: terraform
              data_sources:
                - metadata:
                    type: remote_state
                    name: dns
                  arguments:
                    config:
                      name: key/to/whatever
          providers:
            - metadata:
                type: aws
              data_sources:
                - metadata:
                    type: aws_iam_policy_document
                    name: web_app
                    profile: aws_s3_bucket/web_app
                  arguments:
                    cidr_blocks: 0.0.0.0/0
                    # cidr_blocks: '{{ current_ip }}'
                    # aws_s3_bucket_name: web_app
                    aws_s3_bucket_bucket: c2p4-ember-web-app
                    aws_iam_user_name: ember_deploy
              resources:
                - metadata:
                    type: aws_iam_user
                    name: ember_deploy
                  arguments:
                    name: ember_deploy
                  resources:
                    - metadata:
                        type: aws_iam_access_key
                        name: ember_deploy
                - metadata:
                    type: aws_s3_bucket
                    name: web_app
                    profile: website
                  arguments:
                    bucket: c2p4-ember-web-app
                    policy: aws_iam_policy_document:web_app
                  resources:
                    - metadata:
                        type: aws_route53_record
                        name: web_app
                      arguments:
                        name: 'web-app-{{ env.terraplate.tld }}.{{ config.playbooks.admin.dns[0].resources[1].arguments.name }}'
                        zone_id: "${data.terraform_remote_state.dns.domain.aws_route53_zone_{{ config.playbooks.admin.dns[0].resources[1].metadata.name }}_zone_id}"
#
# - name: Create an environment file for the S3 bucket
#   include_role:
#     name: aws/s3/template-file
#   vars:
#     external_tfvars:
#       aws_access_key_id:
#         provider: iam-access-key
#       aws_secret_access_key:
#         provider: iam-access-key
#   when: false
