---
- name: Create the component output directory tree
  file:
    name: '{{ item }}'
    state: directory
  with_items:
    - '{{ spec.terraplate.component.dir }}'
    - '{{ spec.terraplate.component.variables.dir }}'

- name: Template the component terraform.tfvars file
  template:
    src: tfvars.j2
    dest: '{{ spec.terraplate.component.dir }}/terraform.tfvars'
  vars:
    var_paths:
      - '{{ spec.terraplate.component.variables.path }}'

- name: Remove the existing component file
  file:
    path: '{{ spec.terraplate.component.dir }}/{{ spec.terraplate.component.file_name }}.tf'
    state: absent

- name: Reset the component variables.tfvars file
  file:
    path: '{{ spec.terraplate.component.variables.full_file_name }}'
    state: '{{ item }}'
  with_items: ['absent', 'touch']

- name: Render component file header contents
  blockinfile:
    create: yes
    dest: '{{ spec.terraplate.component.full_file_name }}'
    marker: '# {mark} component header'
    block: |
      # Backend Configuration - required by Terraform; supplied by Terragrunt
      terraform {
        backend "s3" {}
      }

- name: Include render tasks for Provider artifacts
  include_tasks: render.yml
  vars:
    artifact_path: ''
    artifact_type: provider
    provider_doc_path: ''
    c_template_data:
      doc_path: ''
      url_item: ''
    render_type: provider
  with_items: '{{ spec.providers }}'
  loop_control:
    loop_var: spec_artifact
  when: spec.providers is defined

- name: Include render tasks for Data Sources artifacts
  include_tasks: render.yml
  vars:
    artifact_path: '/data_sources'
    artifact_type: '{{ spec_artifact.metadata.type }}'
    provider_doc_path: d
    c_template_data:
      doc_path: '/d/'
      url_item: "{{ spec_artifact.metadata.type.split('_')[1:] | join('_') }}"
    render_type: data
  with_items: '{{ spec.data_sources }}'
  loop_control:
    loop_var: spec_artifact
  when: spec.data_sources is defined

- name: Include render tasks for Resources artifacts
  include_tasks: render.yml
  vars:
    artifact_path: '/resources'
    artifact_type: '{{ spec_artifact.metadata.type }}'
    provider_doc_path: r
    c_template_data:
      doc_path: '/r/'
      url_item: "{{ spec_artifact.metadata.type.split('_')[1:] | join('_') }}"
    render_type: resource
  with_items: '{{ spec.resources }}'
  loop_control:
    loop_var: spec_artifact
  when: spec.resources is defined
