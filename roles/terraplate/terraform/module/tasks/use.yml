---
- set_fact:
    spec: '{{ user_spec | combine(dspec, recursive=True) | combine(dspec2, recursive=True) }}'

- name: Debug the componet specification
  debug:
    var: spec
    verbosity: 0
 # when: false

- name: Create the component output directory tree
  file:
    name: '{{ spec.terraplate.component.dir }}'
    state: '{{ item }}'
  with_items: ['absent', 'directory']
  # with_items:
  #   - '{{ spec.terraplate.component.dir }}'
  #   - '{{ spec.terraplate.component.variables.dir }}'
  when: false

- name: Template the component terraform.tfvars file
  template:
    src: tfvars.j2
    dest: '{{ spec.terraplate.component.dir }}/terraform.tfvars'
  vars:
    var_paths:
      - '{{ spec.terraplate.component.variables.path }}'
  when: false

- name: Remove the existing component file
  file:
    path: '{{ spec.terraplate.component.dir }}/{{ item }}.tf'
    state: absent
  with_items: ['main', 'variables', 'outputs']
  when: false

- name: Reset the component variables.tfvars file
  file:
    path: '{{ spec.terraplate.component.variables.full_file_name }}'
    state: '{{ item }}'
  with_items: ['absent', 'touch']
  when: false

- name: Render component file header contents
  blockinfile:
    create: yes
    dest: '{{ spec.terraplate.component.full_file_name }}'
    marker: '# {mark} component header'
    block: |
      # Backend Configuration - required by Terraform; supplied by Terragrunt
      terraform {
        backend "s3" {}
      }
  when: false

- name: Include render tasks for Provider artifacts
  include_tasks: render.yml
  vars:
    artifact_path: ''
    artifact_type: provider
    provider_doc_path: ''
    c_template_data:
      doc_path: ''
      url_item: ''
    render_type: provider
  with_items: '{{ spec.providers }}'
  loop_control:
    loop_var: spec_artifact
  when: false # spec.providers is defined
