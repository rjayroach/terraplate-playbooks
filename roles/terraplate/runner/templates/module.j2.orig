{% import 'helpers.j2' as h -%} 

{%- macro render_header(render_type, spec) -%}
# {{ render_type }}.tf
# {{ spec.metadata.description }}
{%- endmacro %}


{%- macro render_variables(key, component, parent_key) -%}
  {% if component.definition.arguments is defined %}
    {% for name, definition in component.definition.arguments.iteritems() %}
      {% if not definition.required %}
        {# do nothing #}
      {% elif definition.reference_from is defined and parent_key.split('/') | length > 1 and definition.reference_from[parent_key.split('/')[1]] %}
        {# do nothing #}
      {% elif component.arguments[name] is not defined %}
        {% call var_render(key, name, definition, component) %}{% endcall %}
      {% elif component.arguments[name] is string and (component.arguments[name].startswith('data_sources') or component.arguments[name].startswith('resources')) %}
        {# do nothing #}
      {% elif component.arguments[name] is mapping %}
        {# do nothing #}
      {% elif component.arguments[name] is iterable and component.arguments[name][0].startswith('data_sources') or component.arguments[name][0].startswith('resources') %}
        {# do nothing #}
      {% else %}
        {% call var_render(key, name, definition, component) %}{% endcall %}
      {% endif %}
    {% endfor %}
  {% endif %}{{ caller() }}
{%- endmacro %}


{% macro var_render(key, name, definition, component) %}

variable "{{ h.variable_name(key, name) }}" {
  description = "{{ definition.description }}"
  {% if component.arguments[name] is defined %}
  default = {{ h.default_value(component.arguments[name], definition) }}
  {% endif %}
}{{ caller() }}
{% endmacro %}


{%- macro render_arguments(key, component, parent_key) %}
{% set dbl = '${' -%}

{{ h.data_type(key) }} "{{ key.split('/')[1] }}" "{{ key.split('/') | last }}" {
  {% if component.provisioners is defined %}
    {% for key, value in component.provisioners.iteritems() %}
  provisioner "{{ key }}" {
      {% for key, value in value.iteritems() %}
    {{ key }} = "{{ value }}"
      {% endfor %}
  }
    {% endfor %}
  {% endif %}
  {% if component.definition.arguments is defined %}
    {% for name, definition in component.definition.arguments.iteritems() %}
      {% if definition.reference_from is defined and parent_key.split('/') | length > 1 and definition.reference_from[parent_key.split('/')[1]] %}
  {{ name }} = "{{ dbl }}{{ h.variable_name(parent_key, definition.reference_from[parent_key.split('/')[1]], 'argument') }}}"
      {% elif definition.required and component.arguments[name] is not defined %}
  {{ name }} = "${var.{{ h.variable_name(key, name) }}}"
      {% elif component.arguments[name] is defined %}
        {% if component.arguments[name] is mapping %}
  {{ name }} = {{ h.default_value(component.arguments[name], definition) }}
        {% elif component.arguments[name] is string %}
          {% if (component.arguments[name].startswith('data_sources') or component.arguments[name].startswith('resources')) and definition.reference_from[component.arguments[name].split('/')[1]] %}
  {{ name }} = "{{ dbl }}{{ h.variable_name(component.arguments[name], definition.reference_from[component.arguments[name].split('/')[1]], 'argument') }}}"
          {% else %}
  {{ name }} = {{ h.default_value(component.arguments[name], definition) }}
          {% endif %}
        {% elif component.arguments[name][0] is not mapping and (component.arguments[name][0].startswith('data_sources') or component.arguments[name][0].startswith('resources')) %}
  {{ name }} = ["{{ dbl }}{{ h.variable_name(component.arguments[name][0], definition.reference_from[component.arguments[name][0].split('/')[1]], 'argument') }}}"]
        {% else %}
  {{ name }} = {{ h.default_value(component.arguments[name], definition) }}
        {% endif %}
      {% endif %}
    {% endfor %}
  {% endif %}
}
{{ caller() }}
{%- endmacro %}


{%- macro render_attributes(key, component, parent_key) -%}
{% set dbl = '${' -%}
  {% if component.definition.attributes is defined %}
    {% for name, definition in component.definition.attributes.iteritems() %}
      {% if definition.required %}

output "{{ h.variable_name(key, name) }}" {
  description = "{{ definition.description }}"
  value = "{{ dbl }}{{ h.variable_name(key, name, 'attribute') }}}"
}
      {% endif %}
    {% endfor %}
  {% endif %}{{ caller() }}
{%- endmacro %}
