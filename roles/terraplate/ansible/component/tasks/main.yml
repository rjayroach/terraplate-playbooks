---
- name: '^^^^^ BEGIN {{ spec.component.name }} ^^^^^'
  debug:
    var: '{{ debug_item }}'
  with_items: [spec, reference_component, user_component]
  loop_control:
    loop_var: debug_item
  when: false

- include_vars:
    file: '{{ spec.component.template.file }}'
    name: reference_component

- set_fact:
    qa: {}

- name: Include artifact tasks for providers
  include_role:
    name: terraplate/ansible/artifact
  vars:
    artifact_path: ''
    artifact_type: provider
    qa_path: providers
  with_items: '{{ reference_component.providers }}'
  loop_control:
    loop_var: component_artifact
  when: reference_component.providers is defined

- name: Include artifact tasks for data_sources
  include_role:
    name: terraplate/ansible/artifact
  vars:
    artifact_path: /data_sources
    artifact_type: "{{ component_artifact.metadata.type }}"
    qa_path: data_sources
  with_items: '{{ reference_component.data_sources }}'
  loop_control:
    loop_var: component_artifact
  when: reference_component.data_sources is defined

- name: Include artifact tasks for resources
  include_role:
    name: terraplate/ansible/artifact
  vars:
    artifact_path: /resources
    artifact_type: "{{ component_artifact.metadata.type }}"
    qa_path: resources
  with_items: '{{ reference_component.resources }}'
  loop_control:
    loop_var: component_artifact
  when: reference_component.resources is defined

# - debug:
#     var: user_component
# - debug:
#     var: qa

- set_fact:
    user_component: '{{ user_component | combine(qa, recursive=True) }}'

- debug:
    var: user_component

- name: Create the playbook directory
  file:
    name: '{{ spec.component.playbook.dir }}'
    state: directory

- name: Template the component playbook
  template:
    src: component.yml.j2
    dest: '{{ spec.component.playbook.file }}'
    mode: 0755

- name: Template the component variables to a vars file
  template:
    src: variables.yml.j2
    dest: '{{ spec.component.playbook.variables_file }}'

- name: Encrypt the component variables vars file with the project's vault password
  command: 'ansible-vault encrypt {{ spec.component.playbook.variables_file }}'

#
# - name: "Template the artifact variables to playbooks/{{ spec.component.playbook.file }}/{{ spec.component.inventory_name }}/variables.yml"
#   blockinfile:
#     create: yes
#     dest: '{{ spec.component.playbook.variables_file }}'
#     marker: '# {mark} {{ component_artifact.definition.metadata.type }}' #{{ template_data.artifact.full_name }}'
#     block: "{{ lookup('template', 'variables.yml.j2') }}"
#   when: false # qa.variables | length > 0
#
# - name: Encrypt the artifact variables file using the project's vault password
#   command: 'ansible-vault encrypt {{ spec.component.playbook.variables_file }}'
#   when: false
#
# - name: "Template the artifact arguments to host_vars/{{ spec.component.inventory.name }}/arguments.yml"
#   blockinfile:
#     create: yes
#     dest: '{{ spec.component.playbook.arguments_file }}'
#     marker: '# {mark} {{ component_artifact.definition.metadata.type }}' #{{ template_data.artifact.full_name }}'
#     block: "{{ lookup('template', 'arguments.yml.j2') }}"
#   when: false # qa.arguments | length > 0
